// Code generated by the Lingua Franca compiler from file:
// /Users/matt.weber/git/lingua-franca/benchmark/TS/PingPong.lf
import {Args, Present, Parameter, State, Variable, Priority, Mutation, Read, Triggers, ReadWrite, Write, Named, Reaction, Action, Startup, Schedule, Timer, Reactor, Port, OutPort, InPort, App, Federate, FederateInPort, FederateOutPort, TimedFederateInPort, TimedFederateOutPort} from '../core/reactor'
import {TimeUnit, TimeValue, UnitBasedTimeValue, Tag, Origin} from '../core/time'
import {Log} from '../core/util'
import {ProcessedCommandLineArgs, CommandLineOptionDefs, CommandLineUsageDefs, CommandLineOptionSpec, unitBasedTimeValueCLAType, booleanCLAType} from '../core/cli'
// import { Federate, FederateInPort, FederateOutPort } from '../core/rti';

// Log.global.level = Log.levels.DEBUG;

// ************* App Parameters
let __timeout: TimeValue | undefined = undefined;
let __keepAlive: boolean = true;
let __fast: boolean = false;

// =============== START reactor class PingPong
export class Destination extends Federate {
    message: TimedFederateInPort<string>;
    count: State<number>;
    constructor (
        timeout: TimeValue | undefined = undefined, 
        keepAlive: boolean = false, 
        fast: boolean = false, 
        success?: () => void, 
        fail?: () => void
    ) {
        super(1, 15044, "localhost", timeout, keepAlive, fast, success, fail);
        this.message = new TimedFederateInPort<string>(this, 0, (data: Buffer) => {
            return data.toString() // defaults to utf8 encoding
        })
        this.count = new State<number>(1);

        this.addReaction(
            new Triggers(this.message),
            new Args(this.message),
            function (this, message : Read<string>) {
                console.log(message.get());
            }
        );

        this.addReaction(
            new Triggers(this.message),
            new Args( this.count),
            function (this, count) {
                if (count.get() <= 9) {
                    count.set(count.get() + 1);
                    // console.log(`Incrementing count to ${count.get()}`);
                } else {
                    // console.log("Shutting down");
                    this.util.requestShutdown();
                }
            }
        );
    }
}

// setInterval(() => { console.log("tick!") }, 500);
// ************* Instance Destination of class Destination
let __fed1 = new Destination(__timeout, __keepAlive, __fast);
// ************* Starting Runtime for Destination of class Destination
__fed1._start();

