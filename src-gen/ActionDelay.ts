import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor GeneratedDelay in ActionDelay
// =============== START reactor class GeneratedDelay
export class GeneratedDelay extends Reactor {
    y_state: State<number>;
    act: Action<Present>;
    y_in: InPort<number>;
    y_out: OutPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.y_state = new State(0);
        this.act = new Action<Present>(this, Origin.logical, new UnitBasedTimeInterval(100, TimeUnit.msec));
        this.y_in = new InPort<number>(this);
        this.y_out = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.y_in),
            new Args(this.y_in, this.getSchedulable(this.act), this.y_state),
            function (this, y_in: Readable<number>, act: Schedulable<Present>, y_state: State<number>) {
                y_state.set(y_in.get() as number);
                act.schedule(0);
            }
        );
        this.addReaction(
            new Triggers(this.act),
            new Args(this.act, this.getWritable(this.y_out), this.y_state),
            function (this, act: Readable<Present>, y_out: Writable<number>, y_state: State<number>) {
                y_out.set(y_state.get());
            }
        );
    }
}
// =============== END reactor class GeneratedDelay

// Code generated by the Lingua Franca compiler for reactor Source in ActionDelay
// =============== START reactor class Source
export class Source extends Reactor {
    out: OutPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.out = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.startup),
            new Args(this.getWritable(this.out)),
            function (this, out: Writable<number>) {
                out.set(1);
            }
        );
    }
}
// =============== END reactor class Source

// Code generated by the Lingua Franca compiler for reactor Sink in ActionDelay
// =============== START reactor class Sink
export class Sink extends Reactor {
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x),
            function (this, x: Readable<number>) {
                var elapsed_logical = this.util.time.getElapsedLogicalTime();
                var logical = this.util.time.getCurrentLogicalTime();
                var physical = this.util.time.getCurrentPhysicalTime();
                console.log("Logical, physical, and elapsed logical: " + logical + physical + elapsed_logical); 
                var oneHundredMsec = new UnitBasedTimeInterval(100, TimeUnit.msec);
                if (!elapsed_logical.isEqualTo(oneHundredMsec)) {
                    console.log("FAILURE: Expected " + oneHundredMsec + " but got " + elapsed_logical);
                    this.util.exec.failure();
                } else {
                    console.log("SUCCESS. Elapsed logical time is " + elapsed_logical);
                }
            }
        );
    }
}
// =============== END reactor class Sink

// Code generated by the Lingua Franca compiler for reactor ActionDelay in ActionDelay
// =============== START reactor class ActionDelay
export class ActionDelay extends App {
    source: Source
    sink: Sink
    g: GeneratedDelay
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.source = new Source(this)
        this.sink = new Sink(this)
        this.g = new GeneratedDelay(this)
        this._connect(this.source.out, this.g.y_in);
        this._connect(this.g.y_out, this.sink.x);
    }
}
// =============== END reactor class ActionDelay

// ************* Instance ActionDelay of class ActionDelay
let _app = new ActionDelay('ActionDelay')
// ************* Starting Runtime for ActionDelay of class ActionDelay
_app._start();
