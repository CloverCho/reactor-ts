import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Scale in Gain
// =============== START reactor class Scale
export class Scale extends Reactor {
    scale: Parameter<number>;
    x: InPort<number>;
    y: OutPort<number>;
    constructor (parent:Reactor, scale: number = 2) {
        super(parent);
        this.scale = new Parameter(scale); // Parameter
        this.x = new InPort<number>(this);
        this.y = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x, this.getWritable(this.y), this.scale),
            function (this, x: Readable<number>, y: Writable<number>, scale: Parameter<number>) {
                y.set((x.get() as number) * scale.get());
            }
        );
    }
}
// =============== END reactor class Scale

// Code generated by the Lingua Franca compiler for reactor Test in Gain
// =============== START reactor class Test
export class Test extends Reactor {
    received_value: State<boolean>;
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.received_value = new State(false);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x, this.received_value),
            function (this, x: Readable<number>, received_value: State<boolean>) {
                console.log("Received " + x.get() + ".");
                received_value.set(true);
                if ((x.get() as number) != 2) {
                    console.log("ERROR: Expected 2!");
                    this.util.exec.failure();
                    //throw new Error("ERROR: Expected 2!");
                }
            }
        );
        this.addReaction(
            new Triggers(this.shutdown),
            new Args(this.received_value),
            function (this, received_value: State<boolean>) {
                if (!received_value.get()){
                    console.log("ERROR: No value received by Test reactor!");
                    this.util.exec.failure();
                    //throw new Error("No value received by Test reactor!");
                } else {
                    console.log("Test passes");
                }
            }
        );
    }
}
// =============== END reactor class Test

// Code generated by the Lingua Franca compiler for reactor Gain in Gain
// =============== START reactor class Gain
export class Gain extends App {
    g: Scale
    d: Test
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.g = new Scale(this, undefined)
        this.d = new Test(this)
        this._connect(this.g.y, this.d.x);
        this.addReaction(
            new Triggers(this.startup),
            new Args({ x: this.getWritable(this.g.x) }),
            function (this, g: { x: Writable<number> }) {
                g.x.set(1);
            }
        );
    }
}
// =============== END reactor class Gain

// ************* Instance Gain of class Gain
let _app = new Gain('Gain')
// ************* Starting Runtime for Gain of class Gain
_app._start();
