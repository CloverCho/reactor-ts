import {Variable, Priority, VarList, Mutations, Util, Readable, Schedulable, Writable, Named, Reaction, Deadline, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Foo in ParameterizedState
// =============== START reactor class Foo
class Foo extends Reactor {
    bar: number; // Parameter
    baz: number; // State
    constructor(bar: number, parent:Reactor) {
        super(parent);
        this.bar = bar; // Parameter
        this.baz = bar; // State
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react() {
                var self = this.parent as Foo;
                console.log("Baz: " + self.baz);
            }
        }(this, this.check(this.startup, ), this.check()));
    }
}
// =============== END reactor class Foo

// Code generated by the Lingua Franca compiler for reactor X in ParameterizedState
// =============== START reactor class X
class X extends App {
    a: Foo
    constructor(name: string, timeout: TimeInterval | null, success?: ()=> void, fail?: ()=>void) {
        super(timeout, success, fail);
        this.a = new Foo(42, this)
    }
}
// =============== END reactor class X

// ************* Instance X of class X
let _app = new X('X', null)
// ************* Starting Runtime for X of class X
_app._start();
