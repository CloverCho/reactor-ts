import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Preamble in Preamble
// =============== START reactor class Preamble
// *********** From the preamble, verbatim:
function add42( i:number) {
    return i + 42;
}

// *********** End of preamble.
export class Preamble extends App {
    t: Timer;
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.t = new Timer(this, 0, 0);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t),
            function (this, t: Readable<TimeInstant>) {
                let s = "42";
                let radix = 10;
                let i = parseInt(s, radix);
                console.log("Converted string " + s + " to number " + i);
                console.log("42 plus 42 is " + add42(42));
            }
        );
    }
}
// =============== END reactor class Preamble

// ************* Instance Preamble of class Preamble
let _app = new Preamble('Preamble', new UnitBasedTimeInterval(2, TimeUnit.sec))
// ************* Starting Runtime for Preamble of class Preamble
_app._start();
