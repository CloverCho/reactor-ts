import {Variable, Priority, VarList, Mutations, Util, Readable, Schedulable, Writable, Named, Reaction, Deadline, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Preamble in Preamble
// =============== START reactor class Preamble
// *********** From the preamble, verbatim:
function add42( i:number) {
    return i + 42;
}

// *********** End of preamble.
class Preamble extends App {
    t: Timer;
    constructor(name: string, timeout: TimeInterval | null, success?: ()=> void, fail?: ()=>void) {
        super(timeout, success, fail);
        this.t = new Timer(this, 0, 0);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react() {
                var self = this.parent as Preamble;
                let s = "42";
                let radix = 10;
                let i = parseInt(s, radix);
                console.log("Converted string " + s + " to number " + i);
                console.log("42 plus 42 is " + add42(42));
            }
        }(this, this.check(this.t, ), this.check()));
    }
}
// =============== END reactor class Preamble

// ************* Instance Preamble of class Preamble
let _app = new Preamble('Preamble', new UnitBasedTimeInterval(2, TimeUnit.sec))
// ************* Starting Runtime for Preamble of class Preamble
_app._start();
