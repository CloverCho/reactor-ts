import {Args, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Source in Wcet
// =============== START reactor class Source
export class Source extends Reactor {
    t: Timer;
    out1: OutPort<number>;
    out2: OutPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.t = new Timer(this, 0, 0);
        this.out1 = new OutPort<number>(this);
        this.out2 = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, this.getWritable(this.out1), this.getWritable(this.out2)),
            function(this, t: Readable<TimeInstant>, out1: Writable<number>, out2: Writable<number>) {
                out1.set(5);
                out2.set(10);
            }
        );
    }
}
// =============== END reactor class Source

// Code generated by the Lingua Franca compiler for reactor Work in Wcet
// =============== START reactor class Work
export class Work extends Reactor {
    in1: InPort<number>;
    in2: InPort<number>;
    out: OutPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.in1 = new InPort<number>(this);
        this.in2 = new InPort<number>(this);
        this.out = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.in1, this.in2),
            new Args(this.in1, this.in2, this.getWritable(this.out)),
            function(this, in1: Readable<number>, in2: Readable<number>, out: Writable<number>) {
                let ret:number;
                if ((in1.get() as number) > 10) {
                    ret = (in2.get() as number) * (in1.get() as number);
                } else {
                    ret = (in2.get() as number) + (in1.get() as number);
                }
                out.set(ret);
            }
        );
    }
}
// =============== END reactor class Work

// Code generated by the Lingua Franca compiler for reactor Print in Wcet
// =============== START reactor class Print
export class Print extends Reactor {
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x),
            function(this, x: Readable<number>) {
                console.log("Received: " + x.get());
            }
        );
    }
}
// =============== END reactor class Print

// Code generated by the Lingua Franca compiler for reactor Wcet in Wcet
// =============== START reactor class Wcet
export class Wcet extends App {
    source: Source
    work: Work
    print: Print
    constructor(name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.source = new Source(this)
        this.work = new Work(this)
        this.print = new Print(this)
        this._connect(this.source.out1, this.work.in1);
        this._connect(this.source.out2, this.work.in2);
        this._connect(this.work.out, this.print.x);
    }
}
// =============== END reactor class Wcet

// ************* Instance Wcet of class Wcet
let _app = new Wcet('Wcet')
// ************* Starting Runtime for Wcet of class Wcet
_app._start();
