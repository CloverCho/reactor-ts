import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Deadline in DeadlineHandledAbove
// =============== START reactor class Deadline
export class Deadline extends Reactor {
    threshold: Parameter<TimeInterval>;
    x: InPort<number>;
    deadline_violation: OutPort<boolean>;
    constructor (parent:Reactor, threshold: TimeInterval = new UnitBasedTimeInterval(100, TimeUnit.msec)) {
        super(parent);
        this.threshold = new Parameter(threshold); // Parameter
        this.x = new InPort<number>(this);
        this.deadline_violation = new OutPort<boolean>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x, this.getWritable(this.deadline_violation), this.threshold),
            function (this, x: Readable<number>, deadline_violation: Writable<boolean>, threshold: Parameter<TimeInterval>) {
                console.log("ERROR: Deadline violation was not detected!");
                this.util.exec.failure()
                //throw new Error("ERROR: Deadline violation was not detected!");
            },
            this.threshold.get(),
            function(this, x: Readable<number>, deadline_violation: Writable<boolean>, threshold: Parameter<TimeInterval>) {
                console.log("Deadline violation detected.");
                deadline_violation.set(true);
            }
        );
    }
}
// =============== END reactor class Deadline

// Code generated by the Lingua Franca compiler for reactor DeadlineHandledAbove in DeadlineHandledAbove
// =============== START reactor class DeadlineHandledAbove
export class DeadlineHandledAbove extends App {
    d: Deadline
    violation_detected: State<boolean>;
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.d = new Deadline(this, new UnitBasedTimeInterval(10, TimeUnit.msec))
        this.violation_detected = new State(false);
        this.addReaction(
            new Triggers(this.startup),
            new Args(this.violation_detected, { x: this.getWritable(this.d.x) }),
            function (this, violation_detected: State<boolean>, d: { x: Writable<number> }) {
                // Busy wait 20 msec to cause a deadline violation.
                let initialElapsedTime = this.util.time.getElapsedPhysicalTime();
                while ( this.util.time.getElapsedPhysicalTime().isSmallerThan(initialElapsedTime.add( new UnitBasedTimeInterval(20, TimeUnit.msec))));
                d.x.set(42);
            }
        );
        this.addReaction(
            new Triggers(this.d.deadline_violation),
            new Args(this.violation_detected, { deadline_violation: this.d.deadline_violation }),
            function (this, violation_detected: State<boolean>, d: { deadline_violation: Readable<boolean> }) {
                if( d.deadline_violation.get()){
                    console.log("Output successfully produced by deadline miss handler.");
                    violation_detected.set(true);
                }
            }
        );
        this.addReaction(
            new Triggers(this.shutdown),
            new Args(this.violation_detected),
            function (this, violation_detected: State<boolean>) {
                if ( violation_detected.get()) {
                    console.log("SUCCESS. Test passes.");
                } else {
                    console.log("FAILURE. Container did not react to deadline violation.");
                   this.util.exec.failure()
                    //throw new Error("FAILURE. Container did not react to deadline violation.");
                }
            }
        );
    }
}
// =============== END reactor class DeadlineHandledAbove

// ************* Instance DeadlineHandledAbove of class DeadlineHandledAbove
let _app = new DeadlineHandledAbove('DeadlineHandledAbove', new UnitBasedTimeInterval(2, TimeUnit.sec))
// ************* Starting Runtime for DeadlineHandledAbove of class DeadlineHandledAbove
_app._start();
