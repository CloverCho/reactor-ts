import {Variable, Priority, VarList, Mutations, Util, Readable, Schedulable, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Deadline in DeadlineHandledAbove
// =============== START reactor class Deadline
export class Deadline extends Reactor {
    threshold: TimeInterval; // Parameter
    x: InPort<number>;
    deadline_violation: OutPort<boolean>;
    constructor (parent:Reactor, threshold: TimeInterval = new UnitBasedTimeInterval(100, TimeUnit.msec)) {
        super(parent);
        this.threshold = threshold; // Parameter
        this.x = new InPort<number>(this);
        this.deadline_violation = new OutPort<boolean>(this);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(deadline_violation: Writable<boolean>) {
                var self = this.parent as Deadline;
                console.log("ERROR: Deadline violation was not detected!");
                self.util.failure()
                //throw new Error("ERROR: Deadline violation was not detected!");
            }
            //@ts-ignore
            late(deadline_violation: Writable<boolean>) {
                var self = this.parent as Deadline;
                console.log("Deadline violation detected.");
                deadline_violation.set(true);
            }
        }(this, this.check(this.x), this.check(this.getWritable(this.deadline_violation))).setDeadline(new UnitBasedTimeInterval(0, TimeUnit.msec)));
    }
}
// =============== END reactor class Deadline

// Code generated by the Lingua Franca compiler for reactor DeadlineHandledAbove in DeadlineHandledAbove
// =============== START reactor class DeadlineHandledAbove
export class DeadlineHandledAbove extends App {
    d: Deadline
    violation_detected: boolean; // State
    constructor(name: string, timeout: TimeInterval | null, success?: ()=> void, fail?: ()=>void) {
        super(timeout, success, fail);
        this.d = new Deadline(this, new UnitBasedTimeInterval(10, TimeUnit.msec))
        this.violation_detected = false; // State
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(d: { x: Writable,  }) {
                var self = this.parent as DeadlineHandledAbove;
                // Busy wait 20 msec to cause a deadline violation.
                let initialElapsedTime = self.util.getElapsedPhysicalTime();
                while ( self.util.getElapsedPhysicalTime().isSmallerThan(initialElapsedTime.add( new UnitBasedTimeInterval(20, TimeUnit.msec))));
                d.x.set(42);
            }
        }(this, this.check(this.startup), this.check({ x: this.getWritable(this.d.x),  })));
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(d: { deadline_violation: Readable,  }) {
                var self = this.parent as DeadlineHandledAbove;
                if( d.deadline_violation.get()){
                    console.log("Output successfully produced by deadline miss handler.");
                    self.violation_detected = true;
                }
            }
        }(this, this.check(this.d.deadline_violation), this.check({ deadline_violation: this.d.deadline_violation,  })));
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react() {
                var self = this.parent as DeadlineHandledAbove;
                if ( self.violation_detected) {
                    console.log("SUCCESS. Test passes.");
                } else {
                    console.log("FAILURE. Container did not react to deadline violation.");
                    self.util.failure()
                    //throw new Error("FAILURE. Container did not react to deadline violation.");
                }
            }
        }(this, this.check(this.shutdown), this.check()));
    }
}
// =============== END reactor class DeadlineHandledAbove

// ************* Instance DeadlineHandledAbove of class DeadlineHandledAbove
let _app = new DeadlineHandledAbove('DeadlineHandledAbove', new UnitBasedTimeInterval(2, TimeUnit.sec))
// ************* Starting Runtime for DeadlineHandledAbove of class DeadlineHandledAbove
_app._start();
