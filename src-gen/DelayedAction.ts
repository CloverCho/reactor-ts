import {Variable, Priority, VarList, Mutations, Util, Readable, Schedulable, Writable, Named, Reaction, Deadline, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor DelayedAction in DelayedAction
// =============== START reactor class DelayedAction
class DelayedAction extends App {
    t: Timer;
    count: number; // State
    a: Action<null>;
    constructor(name: string, timeout: TimeInterval | null, success?: ()=> void, fail?: ()=>void) {
        super(timeout, success, fail);
        this.t = new Timer(this, new UnitBasedTimeInterval(0, TimeUnit.msec), new UnitBasedTimeInterval(1, TimeUnit.sec));
        this.count = 0; // State
        this.a = new Action<null>(this, Origin.logical);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(a: Schedulable<null>, ) {
                var self = this.parent as DelayedAction;
                a.schedule( new UnitBasedTimeInterval(100, TimeUnit.msec));
            }
        }(this, this.check(this.t, ), this.check(this.getSchedulable(this.a),)));
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react() {
                var self = this.parent as DelayedAction;
                let elapsedLogical = self.util.getElapsedLogicalTime();
                let elapsedPhysical = self.util.getElapsedPhysicalTime();
                console.log("Logical time since start: " + elapsedLogical);
                console.log("Physical time since start: " + elapsedPhysical);
                let expected = new UnitBasedTimeInterval( self.count * 1, TimeUnit.sec).add(
                    new UnitBasedTimeInterval(100, TimeUnit.msec));
                self.count++;
                if (!elapsedLogical.isEqualTo(expected)) {
                    console.log("Failure: expected " + expected + " but got " + elapsedLogical);
                    self.util.failure();
                    //throw new Error("Expected " + expected + " but got " + elapsedLogical);
                }
            }
        }(this, this.check(this.a, ), this.check()));
    }
}
// =============== END reactor class DelayedAction

// ************* Instance DelayedAction of class DelayedAction
let _app = new DelayedAction('DelayedAction', new UnitBasedTimeInterval(5, TimeUnit.sec))
// ************* Starting Runtime for DelayedAction of class DelayedAction
_app._start();
