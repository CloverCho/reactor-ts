import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor DelayedAction in DelayedAction
// =============== START reactor class DelayedAction
export class DelayedAction extends App {
    t: Timer;
    count: State<number>;
    a: Action<Present>;
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.t = new Timer(this, 0, new UnitBasedTimeInterval(1, TimeUnit.sec));
        this.count = new State(0);
        this.a = new Action<Present>(this, Origin.logical);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, this.getSchedulable(this.a), this.count),
            function (this, t: Readable<TimeInstant>, a: Schedulable<Present>, count: State<number>) {
                a.schedule( new UnitBasedTimeInterval(100, TimeUnit.msec));
            }
        );
        this.addReaction(
            new Triggers(this.a),
            new Args(this.a, this.count),
            function (this, a: Readable<Present>, count: State<number>) {
                let elapsedLogical = this.util.time.getElapsedLogicalTime();
                let elapsedPhysical = this.util.time.getElapsedPhysicalTime();
                console.log("Logical time since start: " + elapsedLogical);
                console.log("Physical time since start: " + elapsedPhysical);
                let expected = new UnitBasedTimeInterval( count.get() * 1, TimeUnit.sec).add(
                    new UnitBasedTimeInterval(100, TimeUnit.msec));
                count.set(count.get() + 1);
                if (!elapsedLogical.isEqualTo(expected)) {
                    console.log("Failure: expected " + expected + " but got " + elapsedLogical);
                    this.util.exec.failure();
                    //throw new Error("Expected " + expected + " but got " + elapsedLogical);
                }
            }
        );
    }
}
// =============== END reactor class DelayedAction

// ************* Instance DelayedAction of class DelayedAction
let _app = new DelayedAction('DelayedAction', new UnitBasedTimeInterval(5, TimeUnit.sec))
// ************* Starting Runtime for DelayedAction of class DelayedAction
_app._start();
