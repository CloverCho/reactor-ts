import {Variable, Priority, VarList, Mutations, Util, Readable, Schedulable, Writable, Named, Reaction, Deadline, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Count in CountTest
// =============== START reactor class Count
class Count extends Reactor {
    t: Timer;
    i: number; // State
    c: OutPort<number>;
    constructor(parent:Reactor) {
        super(parent);
        this.t = new Timer(this, new UnitBasedTimeInterval(0, TimeUnit.msec), new UnitBasedTimeInterval(1, TimeUnit.sec));
        this.i = 0; // State
        this.c = new OutPort<number>(this);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(c: Writable<number>, ) {
                var self = this.parent as Count;
                self.i++;
                c.set(self.i);
            }
        }(this, this.check(this.t, ), this.check(this.getWritable(this.c),)));
    }
}
// =============== END reactor class Count

// Code generated by the Lingua Franca compiler for reactor Test in CountTest
// =============== START reactor class Test
class Test extends Reactor {
    i: number; // State
    c: InPort<number>;
    constructor(parent:Reactor) {
        super(parent);
        this.i = 0; // State
        this.c = new InPort<number>(this);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(c: Readable<number>, ) {
                var self = this.parent as Test;
                console.log("Received " + c.get());
                self.i++
                if (c.get() != self.i) {
                    console.log("ERROR: Expected " + self.i + " but got " + c.get());
                    self.util.failure();
                    //throw new Error("ERROR: Expected " + (this.state as any).i + " but got " + (this.state as any).c.get());
                }
            }
        }(this, this.check(this.c, ), this.check(this.c, )));
    }
}
// =============== END reactor class Test

// Code generated by the Lingua Franca compiler for reactor CountTest in CountTest
// =============== START reactor class CountTest
class CountTest extends App {
    count: Count
    test: Test
    constructor(name: string, timeout: TimeInterval | null, success?: ()=> void, fail?: ()=>void) {
        super(timeout, success, fail);
        this.count = new Count(this)
        this.test = new Test(this)
        this._connect(this.count.c, this.test.c);
    }
}
// =============== END reactor class CountTest

// ************* Instance CountTest of class CountTest
let _app = new CountTest('CountTest', new UnitBasedTimeInterval(3, TimeUnit.sec))
// ************* Starting Runtime for CountTest of class CountTest
_app._start();
