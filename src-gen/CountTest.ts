import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Count in CountTest
// =============== START reactor class Count
export class Count extends Reactor {
    t: Timer;
    i: State<number>;
    c: OutPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.t = new Timer(this, 0, new UnitBasedTimeInterval(1, TimeUnit.sec));
        this.i = new State(0);
        this.c = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, this.getWritable(this.c), this.i),
            function (this, t: Readable<TimeInstant>, c: Writable<number>, i: State<number>) {
                i.set(i.get() + 1);
                c.set(i.get());
            }
        );
    }
}
// =============== END reactor class Count

// Code generated by the Lingua Franca compiler for reactor Test in CountTest
// =============== START reactor class Test
export class Test extends Reactor {
    i: State<number>;
    c: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.i = new State(0);
        this.c = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.c),
            new Args(this.c, this.i),
            function (this, c: Readable<number>, i: State<number>) {
                console.log("Received " + c.get());
                i.set(i.get() + 1)
                if (c.get() != i.get()) {
                    console.log("ERROR: Expected " + i.get() + " but got " + c.get());
                    this.util.exec.failure();
                    //throw new Error("ERROR: Expected " + (this.state as any).i + " but got " + (this.state as any).c.get());
                }
            }
        );
    }
}
// =============== END reactor class Test

// Code generated by the Lingua Franca compiler for reactor CountTest in CountTest
// =============== START reactor class CountTest
export class CountTest extends App {
    count: Count
    test: Test
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.count = new Count(this)
        this.test = new Test(this)
        this._connect(this.count.c, this.test.c);
    }
}
// =============== END reactor class CountTest

// ************* Instance CountTest of class CountTest
let _app = new CountTest('CountTest', new UnitBasedTimeInterval(3, TimeUnit.sec))
// ************* Starting Runtime for CountTest of class CountTest
_app._start();
