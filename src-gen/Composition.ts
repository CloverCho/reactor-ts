import {Variable, Priority, ArgList, GraphUtils, TimeUtils, Triggers, Args, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App, State, Parameter } from "./core/reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./core/time"
// Code generated by the Lingua Franca compiler for reactor Source in Composition
// =============== START reactor class Source
class Source extends Reactor {
    t: Timer;
    period: Parameter<TimeInterval>;
    count: State<number>;
    y: OutPort<number>;
    constructor(parent:Reactor, period: Parameter<TimeInterval>) {
        super(parent);
        this.t = new Timer(this, new UnitBasedTimeInterval(1, TimeUnit.sec), period.get());
        this.period = period;
        this.count = new State(0);
        this.y = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.t), 
            new Args(this.getWritable(this.y), this.count),
            function(y, count) {
                count.set(count.get()+1);
                y.set(count.get());
            }
        );
    }
}
// =============== END reactor class Source

// Code generated by the Lingua Franca compiler for reactor Test in Composition
// =============== START reactor class Test
class Test extends Reactor {
    count: State<number>; // State
    x: InPort<number>;
    constructor(parent:Reactor) {
        super(parent);
        this.count = new State(0);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x, this.count),
            function(x: Port<number>, count) {
                count.set(count.get()+1);
                console.log("Received " + x.get());
                if (x.get() != count.get()) { 
                    console.log("FAILURE: Expected " + count.get());
                    this.util.exec.failure();
                }
            }
        );
    }
}
// =============== END reactor class Test

// Code generated by the Lingua Franca compiler for reactor Composition in Composition
// =============== START reactor class Composition
class Composition extends App {
    s: Source
    d: Test
    constructor(name: string, timeout: TimeInterval | undefined, success?: ()=> void, fail?: ()=>void) {
        super(timeout, false, success, fail);
        this.s = new Source(this, new Parameter(new UnitBasedTimeInterval(2, TimeUnit.sec)))
        this.d = new Test(this)
        this._connect(this.s.y, this.d.x);
    }
}
// =============== END reactor class Composition

// ************* Instance Composition of class Composition
let _app = new Composition('Composition', new UnitBasedTimeInterval(5, TimeUnit.sec))
// ************* Starting Runtime for Composition of class Composition
_app._start();
