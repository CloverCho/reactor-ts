import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Printer in SendingInside2
// =============== START reactor class Printer
export class Printer extends Reactor {
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x),
            function (this, x: Readable<number>) {
                console.log("Inside reactor received:" + x.get() );
            }
        );
    }
}
// =============== END reactor class Printer

// Code generated by the Lingua Franca compiler for reactor SendingInside2 in SendingInside2
// =============== START reactor class SendingInside2
export class SendingInside2 extends App {
    p: Printer
    t: Timer;
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.p = new Printer(this)
        this.t = new Timer(this, 0, 0);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, { x: this.getWritable(this.p.x) }),
            function (this, t: Readable<TimeInstant>, p: { x: Writable<number> }) {
                p.x.set(1);
            }
        );
    }
}
// =============== END reactor class SendingInside2

// ************* Instance SendingInside2 of class SendingInside2
let _app = new SendingInside2('SendingInside2')
// ************* Starting Runtime for SendingInside2 of class SendingInside2
_app._start();
