import {Args, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Foo in TimeState
// =============== START reactor class Foo
export class Foo extends Reactor {
    bar: Parameter<number>;
    baz: State<TimeInterval>;
    constructor (parent:Reactor, bar: number = 42) {
        super(parent);
        this.bar = new Parameter(bar); // Parameter
        this.baz = new State(new UnitBasedTimeInterval(500, TimeUnit.msec));
        this.addReaction(
            new Triggers(this.startup),
            new Args(this.bar, this.baz),
            function (this, bar: Parameter<number>, baz: State<TimeInterval>) {
                console.log("Baz: " + baz.get());
            }
        );
    }
}
// =============== END reactor class Foo

// Code generated by the Lingua Franca compiler for reactor X in TimeState
// =============== START reactor class X
export class X extends App {
    a: Foo
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.a = new Foo(this, undefined)
    }
}
// =============== END reactor class X

// ************* Instance X of class X
let _app = new X('X')
// ************* Starting Runtime for X of class X
_app._start();
