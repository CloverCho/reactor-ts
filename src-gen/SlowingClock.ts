import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor SlowingClock in SlowingClock
// =============== START reactor class SlowingClock
export class SlowingClock extends App {
    interval: State<TimeInterval>;
    expected_time: State<TimeInterval>;
    a: Action<Present>;
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.interval = new State(new UnitBasedTimeInterval(100, TimeUnit.msec));
        this.expected_time = new State(new UnitBasedTimeInterval(100, TimeUnit.msec));
        this.a = new Action<Present>(this, Origin.logical, new UnitBasedTimeInterval(100, TimeUnit.msec));
        this.addReaction(
            new Triggers(this.startup),
            new Args(this.getSchedulable(this.a), this.interval, this.expected_time),
            function (this, a: Schedulable<Present>, interval: State<TimeInterval>, expected_time: State<TimeInterval>) {
                a.schedule(0);
            }
        );
        this.addReaction(
            new Triggers(this.a),
            new Args(this.getSchedulable(this.a), this.interval, this.expected_time),
            function (this, a: Schedulable<Present>, interval: State<TimeInterval>, expected_time: State<TimeInterval>) {
                let elapsed_logical_time : TimeInterval = this.util.time.getElapsedLogicalTime();
                console.log("Logical time since start: " + elapsed_logical_time);
                if (!elapsed_logical_time.isEqualTo(expected_time.get())) {
                    console.log("ERROR: Expected time to be: " + expected_time.get());
                    this.util.exec.failure();
                    //throw new Error("ERROR: Expected time to be: " + (this.state as any).expected_time);
                }
                a.schedule( interval.get());
                expected_time.set(expected_time.get().add(new UnitBasedTimeInterval(100 , TimeUnit.msec)))
                expected_time.set( expected_time.get().add(interval.get()) );
                interval.set(interval.get().add(new UnitBasedTimeInterval(100 , TimeUnit.msec)));
            }
        );
        this.addReaction(
            new Triggers(this.shutdown),
            new Args(this.interval, this.expected_time),
            function (this, interval: State<TimeInterval>, expected_time: State<TimeInterval>) {
                if (!expected_time.get().isEqualTo(new UnitBasedTimeInterval(5500 , TimeUnit.msec))) {
                    console.log("ERROR: Expected the next expected time to be: " + new UnitBasedTimeInterval(5500 , TimeUnit.msec));
                    console.log("It was: " + expected_time.get());
                    this.util.exec.failure();
                    //throw new Error("ERROR: Expected the next expected time to be: [ 5, 500000000 ]");
                }
            }
        );
    }
}
// =============== END reactor class SlowingClock

// ************* Instance SlowingClock of class SlowingClock
let _app = new SlowingClock('SlowingClock', new UnitBasedTimeInterval(5, TimeUnit.sec))
// ************* Starting Runtime for SlowingClock of class SlowingClock
_app._start();
