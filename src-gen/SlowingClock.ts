import {Variable, Priority, VarList, Mutations, Util, Readable, Schedulable, Writable, Named, Reaction, Deadline, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor SlowingClock in SlowingClock
// =============== START reactor class SlowingClock
class SlowingClock extends App {
    interval: TimeInterval; // State
    expected_time: TimeInterval; // State
    a: Action<null>;
    constructor(name: string, timeout: TimeInterval | null, success?: ()=> void, fail?: ()=>void) {
        super(timeout, success, fail);
        this.interval = new UnitBasedTimeInterval(100, TimeUnit.msec); // State
        this.expected_time = new UnitBasedTimeInterval(100, TimeUnit.msec); // State
        this.a = new Action<null>(this, Origin.logical, new UnitBasedTimeInterval(100, TimeUnit.msec));
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(a: Schedulable<null>, ) {
                var self = this.parent as SlowingClock;
                a.schedule(0);
            }
        }(this, this.check(this.startup, ), this.check(this.getSchedulable(this.a),)));
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(a: Schedulable<null>, ) {
                var self = this.parent as SlowingClock;
                let elapsed_logical_time : TimeInterval = self.util.getElapsedLogicalTime();
                console.log("Logical time since start: " + elapsed_logical_time);
                if (!elapsed_logical_time.isEqualTo(self.expected_time)) {
                    console.log("ERROR: Expected time to be: " + self.expected_time);
                    self.util.failure();
                    //throw new Error("ERROR: Expected time to be: " + (this.state as any).expected_time);
                }
                a.schedule( self.interval);
                self.expected_time = self.expected_time.add(new UnitBasedTimeInterval(100 , TimeUnit.msec));
                self.expected_time = self.expected_time.add(self.interval);
                self.interval = self.interval.add(new UnitBasedTimeInterval(100 , TimeUnit.msec));
            }
        }(this, this.check(this.a, ), this.check(this.getSchedulable(this.a),)));
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react() {
                var self = this.parent as SlowingClock;
                if (!self.expected_time.isEqualTo(new UnitBasedTimeInterval(5500 , TimeUnit.msec))) {
                    console.log("ERROR: Expected the next expected time to be: " + new UnitBasedTimeInterval(5500 , TimeUnit.msec));
                    console.log("It was: " + self.expected_time);
                    self.util.failure();
                    //throw new Error("ERROR: Expected the next expected time to be: [ 5, 500000000 ]");
                }
            }
        }(this, this.check(this.shutdown, ), this.check()));
    }
}
// =============== END reactor class SlowingClock

// ************* Instance SlowingClock of class SlowingClock
let _app = new SlowingClock('SlowingClock', new UnitBasedTimeInterval(5, TimeUnit.sec))
// ************* Starting Runtime for SlowingClock of class SlowingClock
_app._start();
