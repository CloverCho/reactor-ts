import {Args, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Count in Stride
// =============== START reactor class Count
export class Count extends Reactor {
    t: Timer;
    stride: Parameter<number>;
    count: State<number>;
    y: OutPort<number>;
    constructor (parent:Reactor, stride: number = 1) {
        super(parent);
        this.t = new Timer(this, 0, new UnitBasedTimeInterval(100, TimeUnit.msec));
        this.stride = new Parameter(stride); // Parameter
        this.count = new State(0);
        this.y = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, this.getWritable(this.y), this.stride, this.count),
            function (this, t: Readable<TimeInstant>, y: Writable<number>, stride: Parameter<number>, count: State<number>) {
                y.set(count.get());
                count.set(count.get() + stride.get());
            }
        );
    }
}
// =============== END reactor class Count

// Code generated by the Lingua Franca compiler for reactor Display in Stride
// =============== START reactor class Display
export class Display extends Reactor {
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x),
            function (this, x: Readable<number>) {
                console.log("Received: " + x.get());
            }
        );
    }
}
// =============== END reactor class Display

// Code generated by the Lingua Franca compiler for reactor Stride in Stride
// =============== START reactor class Stride
export class Stride extends App {
    c: Count
    d: Display
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.c = new Count(this, 2)
        this.d = new Display(this)
        this._connect(this.c.y, this.d.x);
    }
}
// =============== END reactor class Stride

// ************* Instance Stride of class Stride
let _app = new Stride('Stride', new UnitBasedTimeInterval(2, TimeUnit.sec))
// ************* Starting Runtime for Stride of class Stride
_app._start();
