import {Variable, Priority, VarList, Mutations, Util, Readable, Schedulable, Writable, Named, Reaction, Deadline, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Count in Stride
// =============== START reactor class Count
class Count extends Reactor {
    t: Timer;
    stride: number; // Parameter
    count: number; // State
    y: OutPort<number>;
    constructor(stride: number, parent:Reactor) {
        super(parent);
        this.t = new Timer(this, new UnitBasedTimeInterval(0, TimeUnit.msec), new UnitBasedTimeInterval(100, TimeUnit.msec));
        this.stride = stride; // Parameter
        this.count = 0; // State
        this.y = new OutPort<number>(this);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(y: Writable<number>, ) {
                var self = this.parent as Count;
                y.set(self.count);
                self.count += self.stride;
            }
        }(this, this.check(this.t, ), this.check(this.getWritable(this.y),)));
    }
}
// =============== END reactor class Count

// Code generated by the Lingua Franca compiler for reactor Display in Stride
// =============== START reactor class Display
class Display extends Reactor {
    x: InPort<number>;
    constructor(parent:Reactor) {
        super(parent);
        this.x = new InPort<number>(this);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(x: Readable<number>, ) {
                var self = this.parent as Display;
                console.log("Received: " + x.get());
            }
        }(this, this.check(this.x, ), this.check(this.x, )));
    }
}
// =============== END reactor class Display

// Code generated by the Lingua Franca compiler for reactor Stride in Stride
// =============== START reactor class Stride
class Stride extends App {
    c: Count
    d: Display
    constructor(name: string, timeout: TimeInterval | null, success?: ()=> void, fail?: ()=>void) {
        super(timeout, success, fail);
        this.c = new Count(2, this)
        this.d = new Display(this)
        this._connect(this.c.y, this.d.x);
    }
}
// =============== END reactor class Stride

// ************* Instance Stride of class Stride
let _app = new Stride('Stride', new UnitBasedTimeInterval(2, TimeUnit.sec))
// ************* Starting Runtime for Stride of class Stride
_app._start();
