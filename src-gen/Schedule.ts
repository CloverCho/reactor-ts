import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Schedule in Schedule
// =============== START reactor class Schedule
export class Schedule extends Reactor {
    a: Action<Present>;
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.a = new Action<Present>(this, Origin.logical);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x, this.getSchedulable(this.a)),
            function (this, x: Readable<number>, a: Schedulable<Present>) {
                a.schedule( new UnitBasedTimeInterval(200, TimeUnit.msec))
            }
        );
        this.addReaction(
            new Triggers(this.a),
            new Args(this.a),
            function (this, a: Readable<Present>) {
                let elapsedTime = this.util.time.getElapsedLogicalTime();
                console.log("Action triggered at logical time " + elapsedTime + " (sec, nsec) after start.");
                if ( ! elapsedTime.isEqualTo(new UnitBasedTimeInterval(200, TimeUnit.msec))) {
                    console.log("Expected action time to be 200 msec. It was " + elapsedTime + " (sec, nsec).");
                    this.util.exec.failure();
                } else {
                    console.log("Success! Action time was " + elapsedTime);
                }
            }
        );
    }
}
// =============== END reactor class Schedule

// Code generated by the Lingua Franca compiler for reactor Main in Schedule
// =============== START reactor class Main
export class Main extends App {
    a: Schedule
    t: Timer;
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.a = new Schedule(this)
        this.t = new Timer(this, 0, 0);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, { x: this.getWritable(this.a.x) }),
            function (this, t: Readable<TimeInstant>, a: { x: Writable<number> }) {
                a.x.set(1);
            }
        );
    }
}
// =============== END reactor class Main

// ************* Instance Main of class Main
let _app = new Main('Main')
// ************* Starting Runtime for Main of class Main
_app._start();
