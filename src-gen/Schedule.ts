import {Variable, Priority, VarList, Mutations, Util, Readable, Schedulable, Writable, Named, Reaction, Deadline, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Schedule in Schedule
// =============== START reactor class Schedule
class Schedule extends Reactor {
    a: Action<null>;
    x: InPort<number>;
    constructor(parent:Reactor) {
        super(parent);
        this.a = new Action<null>(this, Origin.logical);
        this.x = new InPort<number>(this);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(a: Schedulable<null>, ) {
                var self = this.parent as Schedule;
                a.schedule( new UnitBasedTimeInterval(200, TimeUnit.msec))
            }
        }(this, this.check(this.x, ), this.check(this.getSchedulable(this.a),)));
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react() {
                var self = this.parent as Schedule;
                let elapsedTime = self.util.getElapsedLogicalTime();
                console.log("Action triggered at logical time " + elapsedTime + " (sec, nsec) after start.");
                if ( ! elapsedTime.isEqualTo(new UnitBasedTimeInterval(200, TimeUnit.msec))) {
                    console.log("Expected action time to be 200 msec. It was " + elapsedTime + " (sec, nsec).");
                    self.util.failure();
                } else {
                    console.log("Success! Action time was " + elapsedTime);
                }
            }
        }(this, this.check(this.a, ), this.check()));
    }
}
// =============== END reactor class Schedule

// Code generated by the Lingua Franca compiler for reactor Main in Schedule
// =============== START reactor class Main
class Main extends App {
    a: Schedule
    t: Timer;
    constructor(name: string, timeout: TimeInterval | null, success?: ()=> void, fail?: ()=>void) {
        super(timeout, success, fail);
        this.a = new Schedule(this)
        this.t = new Timer(this, 0, 0);
        this.addReaction(new class<T> extends Reaction<T> {
            //@ts-ignore
            react(a: { x: Writable,  }, ) {
                var self = this.parent as Main;
                a.x.set(1);
            }
        }(this, this.check(this.t, ), this.check({ x: this.getWritable(this.a.x),  }, )));
    }
}
// =============== END reactor class Main

// ************* Instance Main of class Main
let _app = new Main('Main', null)
// ************* Starting Runtime for Main of class Main
_app._start();
