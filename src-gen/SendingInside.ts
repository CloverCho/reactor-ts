import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Printer in SendingInside
// =============== START reactor class Printer
export class Printer extends Reactor {
    count: State<number>;
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.count = new State(1);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x, this.count),
            function (this, x: Readable<number>, count: State<number>) {
                console.log("Inside reactor received: "
                  + x.get());
                if ((x.get() as number) != count.get()) {
                    console.log("FAILURE: Expected " + count.get());
                    this.util.exec.failure();
                    //throw new Error("FAILURE: Expected " + (this.state as any).count);
                }
                count.set(count.get() + 1);
            }
        );
    }
}
// =============== END reactor class Printer

// Code generated by the Lingua Franca compiler for reactor SendingInside in SendingInside
// =============== START reactor class SendingInside
export class SendingInside extends App {
    p: Printer
    t: Timer;
    count: State<number>;
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.p = new Printer(this)
        this.t = new Timer(this, 0, new UnitBasedTimeInterval(1, TimeUnit.sec));
        this.count = new State(0);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, this.count, { x: this.getWritable(this.p.x) }),
            function (this, t: Readable<TimeInstant>, count: State<number>, p: { x: Writable<number> }) {
                count.set(count.get() + 1);
                p.x.set(count.get());
            }
        );
    }
}
// =============== END reactor class SendingInside

// ************* Instance SendingInside of class SendingInside
let _app = new SendingInside('SendingInside', new UnitBasedTimeInterval(2, TimeUnit.sec))
// ************* Starting Runtime for SendingInside of class SendingInside
_app._start();
