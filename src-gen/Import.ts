import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor ImportedAgain in Import
// =============== START reactor class ImportedAgain
export class ImportedAgain extends Reactor {
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x),
            function (this, x: Readable<number>) {
                console.log("Received: " + x.get());
                if ((x.get() as number) != 42) {
                    console.log("ERROR: Expected input to be 42. Got: " + x.get())
                    this.util.exec.failure();
                    //throw new Error("ERROR: Expected input to be 42. Got: " + (this.state as any).x.get());
                }
            }
        );
    }
}
// =============== END reactor class ImportedAgain

// Code generated by the Lingua Franca compiler for reactor Imported in Import
// =============== START reactor class Imported
export class Imported extends Reactor {
    a: ImportedAgain
    x: InPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.a = new ImportedAgain(this)
        this.x = new InPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x, { x: this.getWritable(this.a.x) }),
            function (this, x: Readable<number>, a: { x: Writable<number> }) {
                a.x.set(x.get() as number);
            }
        );
    }
}
// =============== END reactor class Imported

// Code generated by the Lingua Franca compiler for reactor Import in Import
// =============== START reactor class Import
export class Import extends App {
    a: Imported
    t: Timer;
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.a = new Imported(this)
        this.t = new Timer(this, 0, 0);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, { x: this.getWritable(this.a.x) }),
            function (this, t: Readable<TimeInstant>, a: { x: Writable<number> }) {
                a.x.set(42);
            }
        );
    }
}
// =============== END reactor class Import

// ************* Instance Import of class Import
let _app = new Import('Import', new UnitBasedTimeInterval(2, TimeUnit.sec))
// ************* Starting Runtime for Import of class Import
_app._start();
