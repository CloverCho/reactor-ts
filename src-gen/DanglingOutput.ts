import {Args, Present, Parameter, State, Variable, Priority, Mutation, Util, Readable, Schedulable, Triggers, Writable, Named, Reaction, Action, Startup, Scheduler, Timer, Reactor, Port, OutPort, InPort, App } from "./reactor";
import {TimeUnit,TimeInterval, UnitBasedTimeInterval, TimeInstant, Origin, getCurrentPhysicalTime } from "./time"
// Code generated by the Lingua Franca compiler for reactor Source in DanglingOutput
// =============== START reactor class Source
export class Source extends Reactor {
    t: Timer;
    out: OutPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.t = new Timer(this, 0, 0);
        this.out = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.t),
            new Args(this.t, this.getWritable(this.out)),
            function (this, t: Readable<TimeInstant>, out: Writable<number>) {
                out.set(1);
            }
        );
    }
}
// =============== END reactor class Source

// Code generated by the Lingua Franca compiler for reactor Gain in DanglingOutput
// =============== START reactor class Gain
export class Gain extends Reactor {
    x: InPort<number>;
    out: OutPort<number>;
    constructor (parent:Reactor) {
        super(parent);
        this.x = new InPort<number>(this);
        this.out = new OutPort<number>(this);
        this.addReaction(
            new Triggers(this.x),
            new Args(this.x, this.getWritable(this.out)),
            function (this, x: Readable<number>, out: Writable<number>) {
                console.log("Received " + x.get());
                out.set((x.get() as number) * 2);
            }
        );
    }
}
// =============== END reactor class Gain

// Code generated by the Lingua Franca compiler for reactor DanglingOutput in DanglingOutput
// =============== START reactor class DanglingOutput
export class DanglingOutput extends App {
    source: Source
    container: Gain
    constructor (name: string, timeout: TimeInterval | undefined = undefined, keepAlive: boolean = false, success?: () => void, fail?: () => void) {
        super(timeout, keepAlive, success, fail);
        this.source = new Source(this)
        this.container = new Gain(this)
        this._connect(this.source.out, this.container.x);
    }
}
// =============== END reactor class DanglingOutput

// ************* Instance DanglingOutput of class DanglingOutput
let _app = new DanglingOutput('DanglingOutput')
// ************* Starting Runtime for DanglingOutput of class DanglingOutput
_app._start();
