# A grammar file to be used with Canopy:
# https://www.npmjs.com/package/canopy
#
# Explanation and syntax reference: http://canopy.jcoglan.com/
#
# To build:
# `npm install -g canopy`
# `canopy lf.peg --lang javascript` (or java | python | ruby)
grammar LinguaFranca
  Grammar <- Spacing Stament+

  Stament <- Spacing Assignment Spacing / Spacing Declaration Spacing /  Spacing EmbeddedStatement Spacing 
  
  EmbeddedStatement <- "{=" ( !"=" . / "=" !"}" .)* "=}"
  #EmbeddedStatement <- "{=" ([a-zA-Z0-9] / [\s] / ";" / '(' / ')' / ',' )* "=}"
  
  Assignment <- id _ "=" _ Expression _ ";"
  
  Declaration <- EntityDeclaration / PropertyDeclaration _ ";"

  EntityDeclaration <- Target / Reactor / Reaction / Constructor / Composite 

  PropertyDeclaration <- Clock / Port / ReactorPrimitive  # is this right?

  Target <- "target" Spacing id
  
  Expression <-  New / Call / id / Literal 
  
  New <- _ "new" _ Call 
  
  Call <- id "(" _ Expression (_ "=" Literal)? _ ")"

  Port <- id _ "->" _ id

  Reactor  <- "reactor" _ Header _ Body

  Composite  <- "composite" _ Header _ Body #What should composites be allowed precisely? #Just ids or also args?

  Constructor  <- "constructor" _ EmbeddedStatement

  Clock  <- "clock" _ Header _ 

  Header <- id _ Args / id
  
  Args <- "(" _ Param* _ ")"
  
  ReactorPrimitive <- Input / Output / Parameter / Trigger / Action

  Input <- 'input' _ Param

  Output <- 'output' _ Param

  Parameter <- 'parameter' _ Param

  Trigger <- 'trigger' _ Param
  
  Action <- 'action' _ Param

  Param <- id ((":" Type _ "(" Expression ")") / (":" Type) )? 

  Type <- id

  Body <- "{" Spacing Stament* "}"

  id <- [a-zA-Z]+ [a-zA-Z.]*
  
  Literal <- NumLiteral / StringLiteral

#  NumLiteral <- [0-9]* "."? [0-9]+ ("f" / "d")? 
  NumLiteral <- [0-9]* 

  StringLiteral <- "'" [^\'\"]+ "'" /  "\"" [^\"]+ "\"" #this is perhaps too simple, but for now

  Reaction <- "reaction" Args (_ "->" _ ( Args / id ) )? Spacing EmbeddedStatement

  Spacing  <- ([\s] / Comment)*

  Comment  <- '//' (!EndOfLine .)* EndOfLine

  EndOfLine  <- '\r\n' / '\n' / '\r'

  EndOfFile  <- !.

  _ <- [\s]*

  __ <- [\s]+
