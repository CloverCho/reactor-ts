# A grammar file to be used with Canopy:
# https://www.npmjs.com/package/canopy
#
# Explanation and syntax reference: http://canopy.jcoglan.com/
#
# To build:
# `npm install -g canopy`
# `canopy lf.peg --lang javascript` (or java | python | ruby)
#
# Copyright 2019 (see license)
# Authors: Marten Lohstroh, Andres Goens 
#

grammar LinguaFranca

  Grammar <- Spacing Stament+

  #Core of the language
  Stament <- Spacing Assignment Spacing / Spacing Declaration Spacing /  Spacing EmbeddedStatement Spacing 
  EmbeddedStatement <- "{=" ( !"=" . / "=" !"}" .)* "=}"
  Declaration <- EntityDeclaration / PropertyDeclaration _ ";"
  EntityDeclaration <-  Reactor / Reaction / Constructor / Composite / Preamble / Initialize
  PropertyDeclaration <- Target / Import / Clock / Port / ReactorPrimitive / Instance / Language
  Assignment <- AssignmentExpression _ ";"
  Expression <-  EmbeddedStatement / New / Call / id / Literal  #Not sure if "new" fits best here

  #Reactor specific constructs
  Target <- "target" _ id
  Language <- "language" _ id #Added for old srcs from other repo
  Import <- "import" _ id
  New <- _ "new" _ Call 
  Call <- id Arguments
  Port <- id _ "->" _ id
  Reactor  <- "reactor" _ Header _ Body
  Composite  <- "composite" _ Header _ Body #What should composites be allowed precisely? #Just ids or also args?
  Constructor  <- "constructor" _ EmbeddedStatement
  Preamble  <- "preamble" _ EmbeddedStatement #Added for old srcs from other repo
  Initialize  <- "initialize" _ EmbeddedStatement #Added for old srcs from other repo
  Clock  <- "clock" _ Header _ 
  Header <- id _ DeclarationArgs / id
  ReactorPrimitive <- Input / Output / Parameter / Trigger / Action

  #Reactor primitives
  Input <- 'input' _ DeclarationParam
  Output <- 'output' _ DeclarationParam
  Parameter <- 'parameter' _ DeclarationParam
  Trigger <-  'trigger' _ Header / 'trigger' _ DeclarationParam 
  Action <- 'action' _ DeclarationParam
  DeclarationParam <- id ((":" Type _ "(" Expression ")") / (":" Type) )? 
  Reaction <- "reaction" DeclarationArgs (_ "->" _ ( DeclarationArgs / id ) )? Spacing EmbeddedStatement
  Instance <- 'instance' _ AssignmentExpression #Added for old srcs from other repo

  #General/auxiliary definitions
  AssignmentExpression <- id _ "=" _ Expression 
  DeclarationArgs <- "(" _ DeclarationParamList _ ")"
  Arguments <- "(" _ ParamList _ ")"
  DeclarationParamList <- (DeclarationParam _ "," _)+ DeclarationParam / DeclarationParam? 
  ParamList <- (Param _ "," _)+ Param / Param? 
  DeclarationParam <- id ((":" Type _ "(" Expression ")") / (":" Type) )? 
  Param <-  _ Expression (_ "=" _ Literal)? _ 
  Type <- id
  Body <- "{" Spacing Stament* "}"
  id <- [a-zA-Z]+ [a-zA-Z.]*
  Literal <- NumLiteral / StringLiteral / EmbeddedLiteral
  #NumLiteral <- [0-9]* 
  EmbeddedLiteral <- EmbeddedStatement
  NumLiteral <- "-"? ([0-9]*)? "."? [0-9]+ / [0-9]+
  StringLiteral <- "'" [^\'\"]+ "'" /  "\"" [^\"]+ "\"" #this is perhaps too simple, but for now
  Spacing  <- ([\s] / Comment)*
  Comment  <- '//' (!EndOfLine .)* EndOfLine
  _ <- [\s]*
  __ <- [\s]+
  EndOfLine  <- '\r\n' / '\n' / '\r'
  EndOfFile  <- !.

